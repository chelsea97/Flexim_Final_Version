import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

def plot_compare_curve(dataset,query_start, query_end, result_start, result_end, num,index):
    scale = np.arange(0, len(dataset))
    fig, ax = plt.subplots(3, 1)
    ax[0].plot(scale, dataset)
    ax[0].set(xlabel='time', ylabel='original_dataset')
    ax[0].axvspan(query_start, query_end, color='red', alpha=0.2)
    if num == 1:
        ax[0].axvspan(result_start[index], result_end[index], color='blue', alpha=0.2)
    elif num == 2:
        ax[0].axvspan(result_start[index], result_end[index], color='green', alpha=0.2)
    elif num == 3:
        ax[0].axvspan(result_start[index], result_end[index], color='purple', alpha=0.2)
    t = np.arange(query_start, query_end)
    ax[1].plot(t, dataset[t], color='r')
    ax[1].set(xlabel='time', ylabel='query pattern')
    ax[1].grid(True)
    #ax[0].axvspan(query_start, query_end, color='red', alpha=0.2)
    if(num == 1):
            t = np.arange(result_start[index],result_end[index])
            #scale = np.arange(0,1.1,0.1)
            ax[2].plot(t, dataset[t])
            ax[2].set(xlabel='time', ylabel='cosine_similarity')
            #ax[2].set_yticks(scale)
            ax[2].grid(True)
            #ax[2].axvspan(result_start[0], result_end[0],color='green', alpha=0.2)
    elif(num == 2):
            t = np.arange(result_start[index], result_end[index])
            #scale = np.arange(0, 1.1, 0.1)
            ax[2].plot(t, dataset[t])
            ax[2].set(xlabel='time', ylabel='DTW')
            #ax[2].set_yticks(scale)
            ax[2].grid(True)
            #ax[2].axvspan(result_start[i], result_end[i],color='blue', alpha=0.2)
    else:  
            t = np.arange(result_start[index], result_end[index])
            #scale = np.arange(0, 1.1, 0.1)
            ax[2].plot(t, dataset[t])
            ax[2].set(xlabel='time', ylabel='Flexim')
            #ax[2].set_yticks(scale)
            ax[2].grid(True)
    fig.savefig("compare_{}.png".format(num))
    fig.tight_layout()
    plt.show()
    
def plot_compare_curve_2(dataset,query_start,sample_size, cosine_result_start,dtw_result_start,flexim_result_start,k):
    scale = np.arange(0, len(dataset))
    fig, ax = plt.subplots(4, 1)
    t = np.arange(query_start, query_start+sample_size)
    ax[0].plot(t, dataset[t], linewidth=2.5,color='r')
    ax[0].set_ylabel('query pattern',fontsize = 14)
    ax[0].set_xticks([])
    ax[0].set_yticks([])
    ax[0].grid(True)
    t1 = np.arange(cosine_result_start[k-1],cosine_result_start[k-1]+sample_size)
    ax[1].plot(t1, dataset[t1],linewidth=2.5)
    ax[1].set_ylabel('Cosine',fontsize = 14)
    ax[1].set_xticks([])
    ax[1].set_yticks([])
    #ax[1].set_yticks(dataset[t1],font_size = 0.2)
    #ax[2].set_yticks(scale)
    ax[1].grid(True)
    #ax[2].axvspan(result_start[0], result_end[0],color='green', alpha=0.2)
    t2 = np.arange(dtw_result_start[k-1], dtw_result_start[k-1]+sample_size)
    #scale = np.arange(0, 1.1, 0.1)
    ax[2].plot(t2, dataset[t2],linewidth=2.5,color = 'purple')
    ax[2].set_ylabel('DTW',fontsize = 14)
    ax[2].set_xticks([])
    ax[2].set_yticks([])
    #ax[2].set_xticks(t2,font_size = 0.2)
    #ax[2].set_yticks(dataset[t2],font_size = 0.2)
    #ax[2].set_yticks(scale)
    ax[2].grid(True)
    #ax[2].axvspan(result_start[i], result_end[i],color='blue', alpha=0.2)
    t3 = np.arange(flexim_result_start[k-1], flexim_result_start[k-1]+sample_size)
    #scale = np.arange(0, 1.1, 0.1)
    ax[3].plot(t3, dataset[t3],linewidth=2.5,color = 'seagreen')
    ax[3].set_xlabel('time', fontsize = 14)
    ax[3].set_ylabel('Flexim',fontsize = 14)
    ax[3].set_xticks([])
    ax[3].set_yticks([])
    #ax[3].set_xticks(t3,font_size = 0.2)
    #ax[3].set_yticks(dataset[t3],font_size = 0.2)
    #ax[2].set_yticks(scale)
    ax[3].grid(True)
    fig.savefig("compare.png")
    fig.tight_layout()
    plt.subplots_adjust(left=None,bottom=None,right=None,top=None,wspace=None,hspace=0.1)
    plt.show()
    
